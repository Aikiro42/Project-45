{
  "animationScripts": [
    "/items/active/weapons/ranged/abilities/project45gunfire/project45gunfireanimation.lua"
  ],
  
  "animation": "/items/active/weapons/ranged/abilities/project45gunfire/project45gunfire.animation",

  "ability" : {
    "name" : "Synthetik Mechanics",
    "type" : "project45gunfire",
    "scripts" : ["/items/active/weapons/ranged/abilities/project45gunfire/project45gunfire.lua"],
    "class" : "Project45GunFire",

    // ____________________________________[ Stat Config ]____________________________________

    "baseDamage": 5,
    "reloadCost": 0.5, // percent of energy
    "reloadTime": 1,   // 80% actual reload time, 20% cocking time
    "critChance": 0.1,
    "critDamageMult": 1.5,

    "lastShotDamageMult": 1,

    // ____________________________________[ Misc Config ]____________________________________

    // Laser settings.
    "laser": {
      "enabled": true, // if true, laser is rendered
      "width": 0.25,
      "color": [255, 0, 0], // laser color
      "range": 100 // max distance to which the laser is drawn
      // ,"renderMaxRange": true // if false, laser is rendered up to player's aim position only
      // ,"alwaysActive": false
    },

    // Movement settings
    "movementSpeedFactor": 1.25,
    "jumpHeightFactor": 1.25,
    "heavyWeapon": false,

    // Audio settings
    "hollowSoundMult": 0.8, // affects volume of hollow sound

    // ____________________________________[ Projectile Config ]____________________________________
    
    "projectileKind": "projectile", // projectile, hitscan, beam
    "projectileCount": 1,
    "multishot": 1,
    "spread": 0.001, // affects direction the projectile flies to, from the muzzle
    
    // "projectileType": "impactgrenade",
    // "projectileType": "project45dragonsbreath",
    "projectileType": "project45stdbullet",
    "projectileParameters": {
      "power": 100,
      "damageType": "IgnoresDef",
      "statusEffects": []
    },

    "hitscanParameters": {
      // hitscan params
      "range": 100,  // range of the hitscan line in blocks
      
      "punchThrough": 0,  // number of entities to register before stopping the scan
      "fullChargePunchThrough": 3,
      
      "ignoresTerrain": false,  // pierces through terrain if true
      "ignoresTerrainOnFullCharge": false,
      
      "hitscanFadeTime": 0.1, // how long the hitscan line fades away
      "hitscanWidth": 1, // visual width of hitscan line in pixels
      // "hitscanColor": [255,255,200], // color of hitscan projectile; also dictates muzzle flash color
      // damage configuraiton of hitscan damage line
      // baseDamage is calculated by self:damagePerShot() * crit / activeItem.ownerPowerMultiplier()
      // but can be overridden; it's recommended that it shouldn't be overridden
      "hitscanDamageConfig": {
        "damageKind": "physical",
        "statusEffects": []
      },
      // actions to be executed at the end of the hitscan line
      "hitscanActionOnHit": []
      
    },
    
    // Recommendation: set the <ejectCasingsWithMag> setting to true if the gun fires beams
    "beamParameters": {
      // Common configs
      "range": 100,  // length of beam in blocks

      // number of entities the beam passes through before it terminates
      // if the beam passes through less entities it keeps going until it hits terrain
      "punchThrough": 3,
      "fullChargePunchThrough": 3,
      
      // whether the beam fires through terrain or not
      "ignoresTerrain": false,
      "ignoresTerrainOnFullCharge": false,
      
      "beamWidth": 5, // width of beam - beams that are too wide can look weird
      "beamInnerWidth": 3, // width of inner white beam - just for vfx
      "beamJitter": 1, // how much the beam width changes as it's shot - just a vfx
      // "beamColor": [0,140,217], // color of beam
      // damage configuration of beam damage poly
      "beamDamageConfig": {
        "statusEffects" : [ ],
        "damageSourceKind" : "plasma",
        "knockback" : 2
      },
      
      // if true, consumes ammo over time.
      // Otherwise, will only consume ammo every time the beam starts
      "consumeAmmoOverTime": true,

      // determines if gun transists to ejecting state if trigger is released
      "ejectCasingsOnBeamEnd": false


    },

    // ____________________________________[ Ammo Config ]____________________________________
    
    "maxAmmo": 7,
    "bulletsPerReload": 7, // bullets reloaded every active reload; set to negative number to reload all bullets
    "ammoPerShot": 1,
    "ammoConsumeChance": 1,
    "quickReloadTimeframe": [0.5, 0.6, 0.7, 0.8], // [ good% [ perfect% ] good% ] of <reloadTime>

    // Reload and Magazine Config

    "ejectCasingsAfterBurst": false, // ejects casings after burst is finished
    "ejectCasingsWithMag": false, // for revolvers, etc.; casings are not ejected until magazine is ejected
    "ejectMagOnEmpty": false, // ejects mag when the gun hits 0 ammo
    "reloadOnEjectMag": false, // begins reload sequence upon ejecting
    "ejectMagOnReload": false, // ejects mag every (active) reload, like loading a strip and discarding the metal
    "internalMag": false, // whether the "magazine" is a strip or a clip (makes magazine invisible)

    "magVisualPercentage": false, // Whether the mag visually indicates the percentage or count of ammo remaining
    "magFrames": 1, // number of visible frames (for regular, opaque mags, set this to 1)
    "magLoopFrames": 1, // number of loop frames (for regular, opaque mags, set this to 1)
    
    // ammo count interval at which the magazine is animated (think belt ammmo)
    // set this to [1, 1] for regular, opaque mags
    "magAmmoRange": [1, 1],


    // [bad, ok, good, perfect] reload damage multiplier
    "reloadRatingDamageMults": [0.8, 1, 1.25, 1.5],
    "jamChances": [0.1, 0.05, 0, 0],

    // ____________________________________[ Accuracy and Recoil Config ] ____________________________________

    "inaccuracy": 0.05, // affects arm movement as the trigger is pulled
    "recoilAmount": 1 , // amount of recoil per shot, in degrees; arm and weapon will rotate by half of this
    "maxRecoilDeg": 15, // the most the arm and weapon will rotate, in degrees.
    "recoilMult": 1, // multiplies recoilAmount
    "recoverTime": 3, // time it takes to recover aim completely, in seconds
    "screenShakeAmount": 0.1, // amount of screenshake per shot
    // time it takes to reach the max cycle time, in seconds
    // only matters if screenShake is a 2-element array of floats
    "screenShakeMaxTime": 3,

    // ____________________________________[ Fire Config ]____________________________________

    /*
    <semi> is a fundamental setting that affects how the gun works,
    especially when charging is involved:
    - If the gun is semi and charged, then firing happens on release rather than
      on press.
    - If the gun is semi, charged, and fires a beam, you'll essentially be charging the gun
      to fire continuously until the charge is depleted (i.e. below charge time if there's overcharge
      or zero otherwise)
    */
    "semi": true,

    // Makes your gun not automatically eject right after firing,
    // requiring you to cock the gun to fire again.
    // if the gun is autofire (<semi = false>) then this will always be false
    "manualFeed": false,
    
    // Allows you to fire your gun immediately if you hold left-click down while cocking the gun.
    // If the gun isn't manual-feed, this is set to false.
    "slamFire": false,

    // time it takes to cock the gun, cycle rounds, etc.
    // can also be a 2-element array of floats i.e.
    // [<initial cycle time>, <final cycle time>]
    // e.g. if initial cycle time > final cycle time, weapon RoF decreases the longer it's fired
    // vice versa if initial < final
    // cycleTime=0.1 is equal to cycleTime=[0.1, 0.1]
    "cycleTime": 0.1,
    
    "burstCount": 1,

    // time it takes to reach the final cycle time in seconds
    // only matters if cycleTime is a 2-element array of floats
    // by default, gun reaches final RoF when fired for 3s straight
    // if gun is fired for 1.5s straight, it will take 1.5s to decay to initial cycle time
    "cycleTimeMaxTime": 3,

    // multipliers for cycle time growth and decay
    // only matters if cycleTime is a 2-element array of floats
    /*
    e.g. if cycleTimeMaxTime=3, cycleTimeGrowthRate=2, cycleTimeDecayRate=1
    gun reaches final RoF in 1.5s
    but RoF reaches initial in 3s
    */
    "cycleTimeGrowthRate": 1,
    "cycleTimeDecayRate": 1,
    
    "fireTime": 0.01, // time before another input can be registered
    "cockTime": 0.5, // time it takes to cock weapon

    // ____________________________________[ Charge Config ]____________________________________

    "chargeTime": 0,

    "overchargeTime": 0, // allows gun to deal up to 100% more damage, multiplicative to other bonuses
    
    // time it takes for gun to hold charge before discharging
    // helps for consistent behavior
    "dischargeDelayTime": 0.025,

    "dischargeTimeMult": 1, // how fast the gun discharges
    
    "progressiveCharge": true, // whether the charge animation loops or is dependent on charge progress
    "chargeFrames": 6, // only matters if progressiveCharge is true

    // makes the gun fire once the charge timer hits/passes chargeTime
    // "fireBeforeOvercharge": false,
    
    // fires gun after charging, given that there's ammo
    // if the gun is autofire (<semi = false>) then this will always be false
    "autoFireOnFullCharge": false,

    // Resets charge after firing.
    // Only matters if the gun semi-fire (<semi = true>).
    // if the gun is autofire (<semi = false>) then this will always be false.
    "resetChargeOnFire": false,

    // resets charge when ejecting magazine
    "resetChargeOnEject": false,
    "resetChargeOnJam": false, // resets charge when jamming

    // allows charging if the ammo count is zero
    "maintainChargeOnEmpty": false,

     // discharges if the weapon is obstructed by terrain
    "chargeWhenObstructed": false,


    // ____________________________________[ Stances ]____________________________________

    "stances": {
      "ejectmag" : {
        "armRotation" : -45,
        "weaponRotation" : 45,
        "twoHanded" : false,
        "allowRotate" : false,
        "allowFlip" : false
      },
      "reloading" : {
        "armRotation" : 45,
        "weaponRotation" : 0,
        "weaponAngularVelocity": 3600,
        "twoHanded": false
        // "weaponOffset" : [0.25, 0.575],
        // "frontArmFrame" : "run.2",
        // "backArmFrame" : "jump.3"
      },
      "reloaded" : {
        "armRotation" : -90,
        "weaponRotation" : 15,
        "twoHanded" : false,
        "allowRotate" : false,
        "allowFlip" : false
      },
      "boltPull": {
        "armRotation" : 5,
        "weaponRotation" : 5,
        
        "twoHanded" : true,
        
        "allowRotate" : false,
        "allowFlip" : false,
        "frontArmFrame" : "run.2"
        // "weaponOffset": [-1, 0]
      },

      "boltPush": {
        "armRotation" : 5,
        "weaponRotation" : 0,
        
        "twoHanded" : true,

        "allowRotate" : false,
        "allowFlip" : false,
        "frontArmFrame" : "rotation"
        // "weaponOffset": [-1, 0]
      },
      "jammed": {
        "twoHanded": false
      },
      "unjam": {
        "armRotation": -45,
        "weaponRotation": -5,
        "frontArmFrame": "rotation",
        "twoHanded": false      
      }
    }
    
  }
}